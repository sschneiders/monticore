/* (c) https://github.com/MontiCore/monticore */

package de.monticore.parsing;

import static com.google.common.base.Preconditions.checkArgument;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.nio.charset.Charset;

import de.monticore.ast.ASTNode;

import com.google.common.io.CharSource;
import com.google.common.io.Files;

import de.monticore.MontiCoreConstants;
import de.se_rwth.commons.logging.Log;

/**
 * A base class for parsers generated by MontiCore.
 *
 */
public abstract class Parser {
  
  /**
   * Parses the given {@link CharSource}.
   * 
   * @return the ast of the resulting model.
   */
  public abstract ASTNode parse(CharSource model);

  /**
   * Parses the given {@link CharSequence}.
   * 
   * @return the ast of the resulting model.
   */
  public final ASTNode parse(CharSequence model) {
    return parse(CharSource.wrap(Log.errorIfNull(model)));
  }
  
  /**
   * Parses the given {@link InputStream}.
   * 
   * @return the ast of the resulting model.
   */
  public final ASTNode parse(final InputStream model) {
    return parse(new CharSource() {
      @Override
      public Reader openStream() throws IOException {
        return new InputStreamReader(model);
      }
    });
  }

  /**
   * Parses the given {@link File}.
   * 
   * @return the ast of the resulting model.
   */
  public final ASTNode parse(File modelFile) {
    Log.errorIfNull(modelFile);
    checkArgument(modelFile.exists());
    return parse(Files.asCharSource(modelFile, getCharSet()));
  }
  
  /**
   * @return the {@link Charset} used by this parser when reading files.
   */
  protected Charset getCharSet() {
    return MontiCoreConstants.DEFAULT_MODELFILE_CHARSET;
  }

}
