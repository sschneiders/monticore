/* (c) https://github.com/MontiCore/monticore */

/* Sinnfreise Sprache, an Automaten angelehnt, um MontiCore zu testen */
package de.monticore;

grammar FeatureDSL extends mc.grammars.lexicals.TestLexicals {
	
   // Folgenden Kommentar nicht enfernen, da er zum Testen da ist!
  /** Ein File ist ein File!
  	
  	@attribute Automatons Liste von Automaten einer Datei
  	
  */ 		
  File = (automatons:Automaton)+;

  // Folgenden Kommentar nicht enfernen, da er zum Testen da ist!
  /** migh have multiple comments for the same thing, for whatever reason
  		@attribute Name name of the aotutmation
  */
  /** Ein File ist ein File!
  	
  	@attribute Name Name des Automaten
  	@attribute States Da krieg ich Zustände
  	@attribute final
  		Transitionen des Automatens!! Was denn sonst.
  		
  	@attribute Wired Whatever
  	  	
  */ 		
  Automaton=
    "automaton" Name "{" (states:State | final:Transition | wired:ExtraComponent)* "}" ;
    
  Stereotype =
    Name ;
 
    
  State =
    "state" Name  ("<<" (stereotypes:Stereotype ("," stereotypes:Stereotype)*) ">>")?
    ( ("{" (states:State | transitions:Transition)* "}") | ";") ;
  
  Transition =
    from:Name "-" activate:Name ">" to:Name ";" ;
  
  /** Kommentar am Interface ExtraComponent */
  interface ExtraComponent;
  
  Constants implements ExtraComponent =
  	"constants"
  	(pubblic:["public"] /* intentional misspelling!" */ | pubblic:[PUBLIC:"+"] | private:["private"] ) ";"  // ok -> is methods
  	;
  	
  Spices1 implements ExtraComponent =	
   	"spices1"
  	(carlique:["garlic"] /* intentional misspelling!" */ | pepper:["pepper"])* // semantic warning!
  	";"
  ;
  Spices2 implements ExtraComponent =	
   	"spices2" 
  	spicelevel:["none"|"garlic"|salt:"pepper"|mint:"%"] // ok -> int
  	";"
  	;	
  
  Spices3 implements
          ExtraComponent, 
          Interfacewithspicelevel =
   	"spices3"
  	(rek:Spices3)* spicelevel:["none"|"garlic"|salt:"pepper"|mint:"%"] "§"
  	";"
  	;	 
 
   /** Kommentar am Interface interfacewithspicelevel  */
  astrule Spices3 =
  	Rek2:Name
  	Rek3:Name*
  ;
  
  /** Kommentar am Interface interfacewithspicelevel  */
  interface Interfacewithspicelevel;
  
  Spices4 implements Interfacewithspicelevel =	
   	"spices4"
  	(rek:Spices3)* spicelevel:["none"|"garlic"|salt:"pepper"|mint:"%"] ;
  
  
  astrule Spices4 =
  	Rek2:Name
  	Rek3:Name*
  ;
  
 
 
 
 /** Kommentar am Interface interfacewithspicelevel  */
  astrule Interfacewithspicelevel =
    Spicelevel:int 
  	Rek:Spices3*
  	Rek2:Name
  	Rek3:Name*
  ;
  
  Spices5 = "spices5" (a:Name)? (a:Name)?;
	
  A = modifier:["private"] protection:["/"] ;

	
  B= a:A (b:A)*;

  X= b:B*; 

  // mc.feature.ast.ParserTest.testListError2()  
  C= a:A (a:A)*;
  
  // mc.feature.ast.ParserTest.testListError3()
  Complexname=
		names:A ("." names:A)+;
		
		
  TestOptions =
  	"constants" (
  	a:["constants"] )* "constants" ;
  	
  ClassRule = Name rules:A*;
  
  interface InterfaceRule;	
  
  SubClassRule implements InterfaceRule = (a:["tests"] )*;
  
  ClassProd = "aString";
  
  token LexProd = "aString";
		
  token Name =
        ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' | '.')*;
}
