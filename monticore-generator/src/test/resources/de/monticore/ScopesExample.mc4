/* (c) https://github.com/MontiCore/monticore */

package de.monticore;

grammar ScopesExample extends mc.grammars.lexicals.TestLexicals {

    token CHAR = '\'' ( 'a'..'z' | 'A'..'Z' ) '\'';
   
    token INT = ('0'..'9')+ ;
   
    token FLOAT =	INT '.' INT;
		
	//a very simplified grammar.
	ClassDefinition =  (Public:["public"] | Private:["private"] | Protected:["protected"])? 
	        (Final:["final"])? 
	        "class" Name ("extends" Superclass:Name)? "{"
			Body:ClassBody
    "}";
		   
	ClassBody =
		( Fields:Field | Methods:Method | NestedClasses:ClassDefinition)*;
	
		   
		   
	Method = (Public:["public"] | Private:["private"] | Protected:["protected"])? 
			"method" Name  ("returns" ReturnType:Name)?  "{"
			Body:MethodBody
	  		"}";


	MethodBody =  (Fields:Field | Assigns:Assignement | Increases:Increase | Calls:MethodCall)*;
	       
	       
	Field =  (Public:["public"] | Private:["private"] | Protected:["protected"])? 
	         "field" Type:Name  Name ";";

	//actions are not used at the moment cause classgenwithingrammar cannot generate attributes of any type :(
	Assignement =  Varname:Name "=" (Value:STRING 
										| Var:Name // hier muss man sich merken, dass der Typ aufgelöst werden muss
										            // oder besser: Type sollte nicht String sein sondern ein TypeUsage
										            //TODO für Holger: es wäre toll, wenn ClassGenwithinGrammar beliegibe Attributtypen generieren/verstehen kann...
										            //TODO für Steven: Ksann sie jetzt ...
										| Bool:"false" {a.setType("Boolean");}
										| Bool:"true" {a.setType("Boolean");}
										| Int:INT {a.setType("Int");}
										| Float:FLOAT {a.setType("Float");}
										| Call:MethodCall) ";";
	

	Increase =  Varname:Name "+" "+" ";";
	
	MethodCall= MethodName:Name "("  ")" ";";
	
	
	//create places for type infos filled while parsing...
	//not used at the moment cause classgenwithingrammar cannot generate attributes of any type :(
	astrule Assignement =
		Type:Name;

}
