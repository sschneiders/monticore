/* (c) https://github.com/MontiCore/monticore */

package mc.grammars.concepts.visualoutline;

/**
	This is the base language that contains common elements for both
	the visual outline description language and the template language
*/
component grammar TestCommon extends mc.grammars.literals.TestLiterals/* TODO GV: change to Types */{
 // TODO GV: remove it if this grammar extends Types again
 QualifiedName =
        parts:Name ("." parts:Name)*;
	/**
		Figure definition
		References to either a figure from a bundled package  (e.g.
		mc/visualeditor/figures) or a full-qualified name that references a
		user-defined class that implements certain requirements/a certain
		interface
	*/
	VOFigure =
		"figure" Figure:QualifiedName ";";
	
	/**
		Color definitions implement this
		Currently only RGB definitions are supported
	*/
	interface Color;
	
	RGBColor implements Color = 
		"(" r:IntLiteral "," g:IntLiteral "," b:IntLiteral ")"
	;
	
	/* Using external Java expression to make statements conditional */
	VOConditional = 
		"if" "[" Expression "]"
	;
	
	
/**********************************************************************
  Styles
**********************************************************************/
	
	/**
		A style defines how to display text.
		It can be applied to text blocks.
		If a style inherits another style, all properties undefined
		will be used from the parent style.
	*/
	VOStyle =
		"style" name:QualifiedName "{"
			("parent" Parent:QualifiedName ";")?
			("font" Font:StringLiteral ";")?
			("size" Size:IntLiteral ";")?
			("color" Color:Color ";")?
			("bold" Bold:BooleanLiteral ";")?
			("italic" Italic:BooleanLiteral ";")?
			("underline" Underline:BooleanLiteral ";")?
			("overline" Overline:BooleanLiteral ";")?			
			("strike" Strike:BooleanLiteral ";")?
		"}";
	
	/**
		Styles are defined globally and then applied to elements using
		Style References
	*/
	VOStyleRef = 
		"style" name:QualifiedName ";";
	/*@ \newpage @*/
/**********************************************************************
	Text
**********************************************************************/
	
	interface VOTextBodyElement;
	
	/**
		A text body, used in qualified and anonymous text blocks
	*/
	VOTextBody =
		"{"
			(Style:VOStyleRef)?
			(elements:VOTextBodyElement)*
		"}"
		;
	
	/**
		A string expression used inside a text body
	*/
	VOTextBodyExpression implements VOTextBodyElement =
		"[" Expression "]"
		;
	
	/**
		A nested text body, used for styling of partial text
	*/
	VOTextBodyDependent implements VOTextBodyElement =
		data:VOTextBody
	;
	
	/**
		An identifier that refers to a property of the enclosing object
	*/
	VOTextBodyIdentifier implements VOTextBodyElement =
		identifier:QualifiedName
	;
	
	/**
		String literal to use directly
	*/
	VOTextBodyLiteral implements VOTextBodyElement =
		string:StringLiteral
	;
	
	/**
		All elements of the type should be displayed like this
		If the body is ommitted, then just the default behaviour
		(String Builder) is used to build the text string.
	*/
	VOText =
		"text" type:QualifiedName (content:VOTextBody|";")
		;
	
/**********************************************************************
	Links
**********************************************************************/
	
	/**
		A link in the global context.
		
		@attr type The class/non-terminal that this definition applies to
		@attr figure (Optional) Describes the figure to use for this link
		@attr source The property of type that acts as the source.
		@attr target The property of type that acts as the target.
		@attr labels (Optional) Labels for several positions of the link
	*/
	VOLink =
		"link" type:QualifiedName "{"
			("sourceArrow" SourceArrow:VOLinkArrow ";")*
			("targetArrow" TargetArrow:VOLinkArrow ";")*
			"source" Source:VOLinkQualification ";"
			("source" Source:VOLinkQualification ";")*
			"target" Target:VOLinkQualification ";"
			("target" Target:VOLinkQualification ";")*
			("line" Line:QualifiedName ";")?
			(labels:VOLinkLabel)*
		"}"
		;
	
	/* Link arrow definition */
	VOLinkArrow = 
		(condition:VOConditional)? type:QualifiedName ("border" Border:Color)? ("fill" Fill:Color)?
		;

	/* Identifier and type to resolve with symbol table */
	VOLinkQualification =
		(condition:VOConditional)? attribute:QualifiedName ":" type:QualifiedName
		;
	
	/*@ \newpage @*/
	/**
		A "dependent" link in the context of an enclosing element
		The enclosing element acts either as the source or the target for
		the link, so only one of source and target is possible here.
		
		@attr figure (Optional) Describes the figure to use for this link
		@attr source The attribute of the enclosing element that acts as
								 the source (the enclosing element is the target)
		@attr target The attribute of the enclosing element that acts as
		             the target (the enclosing element is the source)
		@attr labels (Optional) Labels for several positions of the link
	*/
	/* Dependent link */
	VODependentLink implements VOContainerChild =
		"link" "{"
			("sourceArrow" SourceArrow:VOLinkArrow ";")*
			("targetArrow" TargetArrow:VOLinkArrow ";")*
			("source" Source:VOLinkQualification ";")*
			("target" Target:VOLinkQualification ";")*
			("line" Line:QualifiedName ";")?
			(labels:VOLinkLabel)*
		"}"
		;
	
	
	/**
		A text to display on one of the specified positions
		(see Tim Enger's Master thesis)
	*/
	VOLinkLabel = 
		"label" (condition:VOConditional)? position:Name (
			( attribute:QualifiedName ";" ) |
			Text:VOTextBody
		)
	;
	
/**********************************************************************
	Containers
**********************************************************************/
	
	interface VOContainerChild;
	/*interface VEContainerListChild extends VEContainerChild;*/
	
	/**
		Besides the configuration options like figure, etc.
		A container may have children.
		
		There are three types of childen:
		1. a QualifiedName to a property of the container
		In this case, a global definition for the type of this element
		must exist or a template to use must be specified
		
		2. a dependent/anonymous container
		
		3. a dependent/anonymous text
	*/
	VOContainer = 
		"container" type:QualifiedName "{"
			config:VOContainerConfig
			children:VOContainerChild*
		"}";
	
	/**
		A dependent/anonymous container just wraps elements together and
		allows to style them.
		
		In contrast to the VEContainer, all references to QualifiedNames
		referer to the next higher enclosing non-anonymous element.
	*/
	/*VEDependentContainer implements VEContainerChild =
		"container" "{"
			config:VEContainerConfig
			children:VEContainerChild*
		"}";*/
	
	VOContainerConfig = 
		(
			(Figure:VOFigure) |
			(decorator:QualifiedName)
		)?
	;
	
	/*
	VEContainerChildIdentifier implements VEContainerChild =
		(QualifiedName ("use"|";"))=>
		QualifiedName ("use" template:QualifiedName)? ";"
		;
	
	VEContainerChildListIdentifier implements VEContainerListChild =
		("list" QualifiedName)=>
		["list"] QualifiedName ("use" template:QualifiedName)? ";"
		;
	*/
	
	VOContainerChildIdentifier implements VOContainerChild =
		["list"]? identifier:QualifiedName ";"
		;
	
	/*
	VEContainerChildContainer implements VEContainerChild =
		("container" QualifiedName)=>
		VEContainer
		;
	
	VEContainerChildListContainer implements VEContainerListChild =
		("list" "container" QualifiedName)=>
		"list" VEContainer
		;
	*/
	VOContainerChildContainer implements VOContainerChild =
		["list"]? "container" (type:QualifiedName)? "{"
			config:VOContainerConfig
			children:VOContainerChild*
		"}"
		;
	
	VOContainerChildDependentContainer implements VOContainerChild =
		"container" "{"
			config:VOContainerConfig
			children:VOContainerChild*
		"}"
		;
	
	
	/*
	VEContainerChildText implements VEContainerChild =
		"text" (
			( identifier:QualifiedName ";" ) |
			content:VETextBody
		)
		;
	
	VEContainerChildListText implements VEContainerChild =
		"list" "text" identifier:QualifiedName ";"
		;
	*/
	VOContainerChildText implements VOContainerChild =
		["list"]? "text" identifier:QualifiedName (content:VOTextBody|";")
		;
	
	VOContainerChildDependentText implements VOContainerChild =
		"text" content:VOTextBody 
		;
	
	/**
		Hole to wire Java expressions
	*/
	external Expression;
}
