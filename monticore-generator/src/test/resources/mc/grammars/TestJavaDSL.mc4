/* (c) https://github.com/MontiCore/monticore */

package mc.grammars;

grammar TestJavaDSL extends mc.grammars.types.TestTypes {

// starting point for parsing a java file
CompilationUnit
    =   PackageDeclaration? ImportDeclaration* TypeDeclaration* EOF
    ;

PackageDeclaration
    =   Annotation* "package" QualifiedName ";"
    ;

ImportDeclaration
    =   "import" (["static"])? QualifiedName ("." ["*"])? ";"
    ;

// Modifiers
interface Modifier ;

PrimitiveModifier implements Modifier =
        Modifier:["private" | "public" | "protected" | "static" | "transient"
        | "final" | "abstract" | "native" | "threadsafe" | "synchronized"
        | "const" | "volatile" | "strictfp"]
    ;

// Type declarations
interface TypeDeclaration extends ClassMemberDeclaration,
        InterfaceMemberDeclaration, AnnotationTypeElementDeclaration, BlockStatement;

EmptyDeclaration implements TypeDeclaration
    =   ";"
    ;

ClassDeclaration implements TypeDeclaration
    =   Modifier* "class" Name TypeParameters?
        ("extends" superClass:Type)?
        ("implements" implementedInterfaces:(Type || ",")+)?
        ClassBody
    ;

ClassBody
    =   "{" ClassBodyDeclaration* "}"
    ;

interface ClassBodyDeclaration ;

InterfaceDeclaration implements TypeDeclaration
    =   Modifier* "interface" Name TypeParameters?
        ("extends" extendedInterfaces:(Type || ",")+)?
        InterfaceBody
    ;

InterfaceBody
    =   "{" InterfaceBodyDeclaration* "}"
    ;

interface InterfaceBodyDeclaration ;

EnumDeclaration implements TypeDeclaration
    =   Modifier* "enum" Name
        ("implements" implementedInterfaces:(Type || ",")+)?
        "{" (EnumConstantDeclaration || ",")* ","? EnumBody? "}"
    ;

EnumConstantDeclaration
    =   Annotation* Name Arguments? ClassBody?
    ;

EnumBody
    =   ";" ClassBodyDeclaration*
    ;

ClassBlock implements ClassBodyDeclaration
    = (["static"])? JavaBlock
    ;

interface ClassMemberDeclaration extends ClassBodyDeclaration ;

MethodDeclaration implements ClassMemberDeclaration
    =   MethodSignature (MethodBody | ";")
    ;

interface MethodBody ;

ConstructorDeclaration implements ClassMemberDeclaration
    =   Modifier* TypeParameters? Name FormalParameters ("throws" Throws)?
        ConstructorBody
    ;

interface ConstructorBody ;

FieldDeclaration implements ClassMemberDeclaration
    =   Modifier* Type (VariableDeclarator || ",")+ ";"
    ;

interface InterfaceMemberDeclaration extends InterfaceBodyDeclaration ;

ConstDeclaration implements InterfaceMemberDeclaration
    =   Modifier* Type (ConstantDeclarator || ",")+ ";"
    ;

ConstantDeclarator
    =   Name (dim:"[" "]")* "=" VariableInitializer
    ;

InterfaceMethodDeclaration implements InterfaceMemberDeclaration
    =   MethodSignature ";"
    ;

/* We use rule this even for void methods which cannot have [] after parameters.
   This simplifies grammar and we can consider void to be a type, which
   renders the [] matching as a context-sensitive issue or a semantic check
   for invalid return type after parsing.
 */
MethodSignature
    =   Modifier* TypeParameters?
        ReturnType Name FormalParameters (dim:"[" "]")*
        ("throws" Throws)?
    ;

Throws
    =   (QualifiedName || ",")+
    ;

VariableDeclarator
    =   DeclaratorId ("=" VariableInitializer)?
    ;

DeclaratorId
    =   Name (dim:"[" "]")*
    ;

interface VariableInitializer ;

ArrayInitializer implements VariableInitializer
    =   "{" (VariableInitializer || ",")* (",")? "}"
    ;

FormalParameters
    =   "(" FormalParameterListing? ")"
    ;

FormalParameterListing
    =   (FormalParameter || ",")+ ("," LastFormalParameter)?
    |   LastFormalParameter
    ;

FormalParameter
    =   PrimitiveModifier* Type DeclaratorId
    ;

LastFormalParameter
    =   PrimitiveModifier* Type "..." DeclaratorId
    ;

// ANNOTATIONS

Annotation implements Modifier,  ElementValue
    =   "@" annotationName:QualifiedName ( "(" AnnotationArguments? ")" )?
    ;

interface AnnotationArguments ;

AnnotationPairArguments implements AnnotationArguments
   =   (ElementValuePair || ",")+
   ;

ElementValuePair
    =   Name "=" ElementValue
    ;

interface ElementValue extends AnnotationArguments;

ElementValueArrayInitializer implements ElementValue
    =   "{" (ElementValue || ",")* (",")? "}"
    ;

AnnotationTypeDeclaration implements TypeDeclaration
    =   Modifier* "@" "interface" Name AnnotationTypeBody
    ;

AnnotationTypeBody
    =   "{" (AnnotationTypeElementDeclaration)* "}"
    ;

interface AnnotationTypeElementDeclaration ;

AnnotationMethod implements AnnotationTypeElementDeclaration
    =   Modifier* Type Name "(" ")" DefaultValue? ";"
    ;

AnnotationConstant implements AnnotationTypeElementDeclaration
    =   Modifier* Type (VariableDeclarator || ",")+ ";"
    ;

DefaultValue
    =   "default" ElementValue
    ;

// STATEMENTS / BLOCKS

interface BlockStatement ;

LocalVariableDeclarationStatement implements BlockStatement
    =    LocalVariableDeclaration ";"
    ;

LocalVariableDeclaration implements ForInit
    =   PrimitiveModifier* Type (VariableDeclarator || ",")+
    ;

interface Statement extends BlockStatement ;

JavaBlock implements Statement, MethodBody, ConstructorBody, FinallyBlock
    =   "{" BlockStatement* "}"
    ;

AssertStatement implements Statement
    =   "assert" assertion:Expression (":" message:Expression)? ";"
    ;

IfStatement implements Statement
    =   "if" "(" condition:Expression ")" thenStatement:Statement ("else" elseStatement:Statement)?
    ;

ForStatement implements Statement
    =   "for" "(" ForControl ")" Statement
    ;

interface ForControl ;

CommonForControl implements ForControl
    =   ForInit? ";" condition:Expression? ";" (Expression || ",")*
    ;

interface ForInit ;

ForInitByExpressions implements ForInit
    =   (Expression || ",")+
    ;

EnhancedForControl implements ForControl
    =   FormalParameter ":" Expression
    ;

WhileStatement implements Statement
    =   "while" "(" condition:Expression ")" Statement
    ;

DoWhileStatement implements Statement
    =   "do" Statement "while" "(" condition:Expression ")" ";"
    ;

TryStatement implements Statement
    =   "try" JavaBlock ExceptionHandler
    ;

interface ExceptionHandler ;

CatchExceptionsHandler implements ExceptionHandler
    =   CatchClause+ ("finally" FinallyBlock)?
    ;

FinallyBlockOnlyHandler implements ExceptionHandler
    =   ("finally" FinallyBlock)
    ;

TryStatementWithResources implements Statement
    =   "try" "(" (Resource || ";")+ ";"? ")" JavaBlock CatchClause* ("finally" FinallyBlock)?
    ;

Resource
    =   PrimitiveModifier* ClassOrInterfaceType DeclaratorId "=" Expression
    ;

ClassOrInterfaceType
    =   (IdentifierAndTypeArgument || ".")+
    ;

IdentifierAndTypeArgument
    =   Name& TypeArguments?
    ;

CatchClause
    =   "catch" "(" PrimitiveModifier* CatchType Name ")" JavaBlock
    ;

CatchType
    =   (QualifiedName || "|")+
    ;

interface FinallyBlock ;

SwitchStatement implements Statement
    =   "switch" "(" Expression ")" "{" SwitchBlockStatementGroup* SwitchLabel* "}"
    ;

SynchronizedStatement implements Statement
    =   "synchronized" "(" Expression ")" JavaBlock
    ;

ReturnStatement implements Statement
    =   "return" Expression? ";"
    ;

ThrowStatement implements Statement
    =   "throw" Expression ";"
    ;

BreakStatement implements Statement
    =   "break" label:Name? ";"
    ;

ContinueStatement implements Statement
    =   "continue" label:Name? ";"
    ;

EmptyStatement implements Statement
    =   ";"
    ;

ExpressionStatement implements Statement
    =   Expression ";"
    ;

LabeledStatement implements Statement
    =   label:Name ":" Statement
    ;

/** Matches cases then statements, both of which are mandatory.
 *  To handle empty cases at the end, we add switchLabel* to statement.
 */
SwitchBlockStatementGroup
    =   SwitchLabel+ BlockStatement+
    ;

interface SwitchLabel ;

ConstantExpressionSwitchLabel implements SwitchLabel
    =   "case" constantExpression:Expression ":"
    ;

EnumConstantSwitchLabel implements SwitchLabel
    =   "case" enumConstantName:Name ":"
    ;

DefaultSwitchLabel implements SwitchLabel
    =   "default" ":"
    ;

Expression implements ElementValue, VariableInitializer
    =   PrimaryExpression
    |   Expression "." Name&
    |   Expression "." ["this"]
    |   Expression "." InnerCreator
    |   Expression "." "super" SuperSuffix
    |   Expression "." ExplicitGenericInvocation
    |   arrayExpression:Expression "[" indexExpression:Expression "]"
    |   callExpression:Expression "(" parameterExpression:(Expression || ",")* ")"
    |   Creator
    |   "(" typeCastType:Type ")" Expression
    |   Expression
        (   suffixOp:"++"
        |   suffixOp:"--"
        )
    |   (   prefixOp:"+"
        |   prefixOp:"-"
        |   prefixOp:"++"
        |   prefixOp:"--"
        )
        Expression
    |   (booleanNot:"~"|booleanNot:"!") Expression
    |   leftExpression:Expression
        (   multiplicativeOp:"*"
        |   multiplicativeOp:"/"
        |   multiplicativeOp:"%"
        )
        rightExpression:Expression
    |   leftExpression:Expression
        (   additiveOp:"+"
        |   additiveOp:"-"
        )
		rightExpression:Expression
    |   leftExpression:Expression
	    // It is not possible to define "<<", ">>" or ">>>".
        // Parsing generic typs like "List<List<String>>" leads to problems.
        (   shiftOp:"<" "<"
          {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) &&
          	(_input.LT(-1).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1))}?
        |   shiftOp:">" ">" ">"
          {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) &&
            (_input.LT(-3).getLine()==_input.LT(-2).getLine()) &&
            (_input.LT(-3).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1) &&
          	(_input.LT(-2).getCharPositionInLine()==_input.LT(-1).getCharPositionInLine()+1))}?
        |   shiftOp:">" ">"
         {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) &&
          	(_input.LT(-1).getCharPositionInLine()==_input.LT(-2).getCharPositionInLine()+1))}?
        )
        rightExpression:Expression
    |   leftExpression:Expression
        (   comparison:"<="
        |   comparison:">="
        |   comparison:">"
        |   comparison:"<"
        )
        rightExpression:Expression
    |   Expression "instanceof" instanceofType:Type
    |   leftExpression:Expression
        (   identityTest:"=="
        |   identityTest:"!="
        )
        rightExpression:Expression
    |   leftExpression:Expression binaryAndOp :"&"  rightExpression:Expression
    |   leftExpression:Expression binaryXorOp :"^"  rightExpression:Expression
    |   leftExpression:Expression binaryOrOp  :"|"  rightExpression:Expression
    |   leftExpression:Expression booleanAndOp:"&&" rightExpression:Expression
    |   leftExpression:Expression booleanOrOp :"||" rightExpression:Expression
    |   condition:Expression "?" trueExpression:Expression ":" falseExpression:Expression
    |   leftExpression:Expression
        (   assignment:"="
        |   assignment:"+="
        |   assignment:"-="
        |   assignment:"*="
        |   assignment:"/="
        |   assignment:"&="
        |   assignment:"|="
        |   assignment:"^="
        |   assignment:">>="
        |   assignment:">>>="
        |   assignment:"<<="
        |   assignment:"%="
        )
        rightExpression:Expression
    ;

PrimaryExpression
    =   "(" Expression ")"
    |   ["this"]
    |   ["super"]
    |   Literal
    |   Name&
    |   ReturnType "." "class"
    |   ExplicitGenericInvocation
    |   TypeArguments "this" Arguments
    ;

interface Creator ;

AnonymousClass implements Creator
    =   "new" TypeArguments? CreatedName ClassCreatorRest
    ;

ArrayCreator implements Creator
    =   "new" CreatedName ArrayDimensionSpecifier
    ;

interface ArrayDimensionSpecifier ;

ArrayDimensionByInitializer implements ArrayDimensionSpecifier
    =   (dim:"[" "]")+ ArrayInitializer
    ;

ArrayDimensionByExpression implements ArrayDimensionSpecifier
    =   ("[" Expression "]")+ (dim:"[" "]")*
    ;

CreatedName
    =   (IdentifierAndTypeArgument || ".")+
    |   PrimitiveType
    ;

InnerCreator
    =   "new" firstTypeArguments:TypeArguments? Name& secondTypeArguments:TypeArguments? ClassCreatorRest
    ;

ClassCreatorRest
    =   Arguments ClassBody?
    ;

ExplicitGenericInvocation
    =   TypeArguments ExplicitGenericInvocationSuffix
    ;

ExplicitGenericInvocationSuffix
    =   "super" SuperSuffix
    |   Name Arguments
    ;

SuperSuffix
    =   Arguments
    |   "." Name Arguments?
    ;

Arguments
    =   "(" (Expression || ",")* ")"
    ;
}
